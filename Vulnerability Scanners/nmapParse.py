from xml.dom import minidom
import csv
import subprocess
import json
import re
from pprint import pprint
from pkg_resources import parse_version
from distutils.version import LooseVersion
from argparse import ArgumentParser
import urllib2
import os
import time

class Exploitobject(object):
    ID = ""
    platform = ""
    name = ""
    version = ""
    location = ""        
    exptype = ""

    def __init__(self, ID, platform, name, version, location, exptype):
        self.ID = ID
        self.platform = platform
        self.name = name
        self.location = location
        self.exptype = exptype

class Vulnerabilityobject(object):
    ID = ""
    cvss = ""
    references = []
    summary = ""
    vulnerable_configuration = []

    def __init__ (self, ID, cvss, references, summary, vulnerable_configuration):
        self.ID = ID
        self.cvss = cvss
        self.references = references
        self.summary = summary
        self.vulnerable_configuration = vulnerable_configuration

class Service(object):
    name = ""
    product = ""
    version = ""
    port = ""
    protocol = ""
    info = ""
    exploits = []
    vulnerabilities = []

    def __init__ (self, name, product, version, port, protocol, info):
        self.name = name
        self.product = product
        self.version = version
        self.port = port
        self.info = info
        self.exploits = []
        self.vulnerabilities = []


def ascii_encode_dict(data):
    ascii_encode = lambda x: x.encode('ascii') if isinstance(x, unicode) else x 
    return dict(map(ascii_encode, pair) for pair in data.items())

def  searchsploit(service,version):
    command = "searchsploit -j "+service.name.split(' ')[0]
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    data = json.loads(output.decode("utf-8"), strict=False)
    exploitdb  = []
    i = 0
    if data["RESULTS_EXPLOIT"]:
        i = 1
        for item in data["RESULTS_EXPLOIT"]:
            exploitdbProduct = service.name 
            exploitdbVersion = getversion(item["Title"])
            include = False
            for versionIter in exploitdbVersion:
                versiontmp = version
                Comparable = True
                if versionIter == 'none' or version == 'none':
                    Comparable = False
                if len(version.split('.')) > len(versionIter.split('.')) and Comparable:
                    version = '.'.join(version.split('.',len(versionIter.split('.')))[:len(versionIter.split('.'))])
                if len(version.split('.')) < len(versionIter.split('.')) and Comparable:
                    versionIter = '.'.join(versionIter.split('.',len(version.split('.')))[:len(version.split('.'))])
                if not Comparable or (LooseVersion(versionIter) >= LooseVersion(version)):
                    include = True
                version = versiontmp
            if include:
                exploitInstance = Exploitobject(item["EDB-ID"],item["Platform"], item["Title"], exploitdbVersion, item["Path"], item["Type"])
                exploitdb.append(exploitInstance)
    return exploitdb 

def parseNMAP(writer, xmldocname):
    xmldoc = minidom.parse(xmldocname)
    fieldnames = ['Port','Name','Product','Version','Info']
    writer.writerow(fieldnames)
    services = []
    portlist = xmldoc.getElementsByTagName('port')
    for portInstance in portlist:
        port = portInstance.attributes['portid'].value
        protocol = portInstance.attributes['portid']
        for item in portInstance.getElementsByTagName('service'):
            name = item.attributes['name'].value
            if item.hasAttribute('product'):
                product = name
                name = item.attributes['product'].value
            else:
                product = "none"
            if item.hasAttribute('version'):
                version = item.attributes['version'].value
            else:
                version = "none"

            if item.hasAttribute('extrainfo'):
                info = item.attributes['extrainfo'].value
            else:
                info = "none"
        serviceInstance = Service(name, product, version, port, protocol, info)
        version = '\'' + serviceInstance.version
        writer.writerow([serviceInstance.port, serviceInstance.name, serviceInstance.product, version, serviceInstance.info])
        services.append(serviceInstance)
    return services

def getvulnerabilities(service):
    current_time = time.time()
    filename = ".tempCVE_" + service.name + ".txt"
    include = False
    includeNext = True
    references = []
    vulnerableconfig = []
    vulnerabilities = []
    if(os.path.isfile(filename)):
        creation_time = os.path.getctime(filename)
        if(current_time - creation_time) // (24 * 3600) >= 5:
                os.unlink(filename)
                jdata = json.load(urllib2.urlopen("http://cve.circl.lu/api/search/"+service.name.split(' ')[0]))
                with open (filename, 'w') as outfile:
                    json.dump(jdata, outfile)
    else:
        jdata = json.load(urllib2.urlopen("http://cve.circl.lu/api/search/"+service.name.split(' ')[0]))
        with open (filename, 'w') as outfile:
            json.dump(jdata, outfile)
    with open (filename, 'r') as infile:
        jdata = json.load(infile)        
    for data in jdata:
        for vuln in jdata[data]:
            for version in vuln["vulnerable_configuration"]:
                if service.version != "none":
                    if service.version in version:
                        include = True
                        vulnerableconfig.append(version)
            if include == True:
                for reference in vuln["references"]:
                    references.append(reference)            
                if 'cvss' in vuln:
                    cvss = vuln["cvss"]
                else:
                    cvss = []
                vulnerabilityinstance = Vulnerabilityobject(vuln["id"], cvss, references, vuln["summary"], vulnerableconfig)
                vulnerabilities.append(vulnerabilityinstance)
    return vulnerabilities
                        
def getversion(service):
    groups = re.findall(r'([\d]+\.\S+)+', service)
    temp = []
    for group in groups:
		for version in group.split('/'):	
			temp.append(version)
    return temp


def main():
    parser = ArgumentParser(description = "Find exploits and vulnerabilities from a NMAP Scan")
    requiredNamed = parser.add_argument_group('Required named arguments')
    requiredNamed.add_argument("-n", "--nmap", dest="xmldoc", help='NMAP XML File', required=True)
    requiredNamed.add_argument("-o", "--output", dest="Directory", help='Directory to output results', required=True)
    args = parser.parse_args()
    print "[*] Creating NMAP File"
    csvdoc = open(args.Directory+'NMAP.csv', 'w')
    writer = csv.writer(csvdoc)
    services = parseNMAP(writer, args.xmldoc)
    
    print "[*] Creating Exploit File"
    exploitcsvdoc = open(args.Directory+'exploits.csv', 'w')
    exploitwriter = csv.writer(exploitcsvdoc)
    fieldnames = ['Service Port','Service Name','Service Product','Service Version','Service Info','Exploit ID','Exploit Platform','Exploit Name','Exploit Version','Exploit Location','Exploit Type']
    exploitwriter.writerow(fieldnames)

    print "[*] Creating Vulnerabilities File"
    vulncvsdoc = open(args.Directory+'vulns.csv', 'w')
    vulnswriter = csv.writer(vulncvsdoc)   
    fieldnames = ['ID','CVSS Score','Summary', 'Vulnerable Configuration', 'Service Port', 'Service Name', 'Service Product', 'Service Version', 'Service Info']
    vulnswriter.writerow(fieldnames)

    for service in services:
        service.exploits = searchsploit(service, service.version)
        service.vulnerabilities = getvulnerabilities(service)
        version = '\'' + service.version
        for exploit in service.exploits:
            exploitwriter.writerow([service.port, service.name, service.product, version, service.info, exploit.ID, exploit.platform, exploit.name, exploit.version, exploit.location, exploit.exptype])       
        for vulnerability in service.vulnerabilities:
            vulnswriter.writerow([vulnerability.ID, vulnerability.cvss, vulnerability.summary, vulnerability.vulnerable_configuration, service.port, service.name, service.product, version, service.info])

       

if __name__ == "__main__":
    main()
